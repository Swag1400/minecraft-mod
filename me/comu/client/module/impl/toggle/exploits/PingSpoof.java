package me.comu.client.module.impl.toggle.exploits;

import me.comu.api.event.Listener;
import me.comu.api.stopwatch.Stopwatch;
import me.comu.client.events.PacketEvent;
import me.comu.client.module.ModuleType;
import me.comu.client.module.ToggleableModule;
import me.comu.client.properties.NumberProperty;
import me.comu.client.utils.Helper;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;

import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

public final class PingSpoof extends ToggleableModule
{
    private Stopwatch stopwatch = new Stopwatch();
    private List<Packet> packetList;

    private NumberProperty<Integer> waitTime = new NumberProperty<Integer>(5, 1, 30, 2, new String[]{"Wait", "Wait-Time","time","w","t","waittime"});

    public PingSpoof()
    {
        super("PingSpoof", new String[] {"pingspoof", "spoofping","pings","ping","ps"}, 0xFFB5C75B, ModuleType.EXPLOITS);
        this.offerProperties(waitTime);
        packetList = new CopyOnWriteArrayList<Packet>();
        this.listeners.add(new Listener<PacketEvent>("no_hunger_motion_update_listener")
        {
            @Override
            public void call(PacketEvent event)
            {
                if (!minecraft.isSingleplayer()) {
                    if (event.getPacket() instanceof C00PacketKeepAlive && minecraft.thePlayer.isEntityAlive()) {
                        packetList.add(event.getPacket());
                        event.setCanceled(true);
                    }
                    if (stopwatch.hasCompleted(1000 * waitTime.getValue())) {
                        if (!packetList.isEmpty()) {
                            int i = 0;
                            final double totalPackets = getIncremental(Math.random() * 10.0, 1.0);
                            for (final Packet packet : packetList) {
                                if (i < totalPackets) {
                                    ++i;
                                    Helper.sendPacket(packet);
                                    packetList.remove(packet);
                                }
                            }
                        }

                        Helper.sendPacket(new C00PacketKeepAlive(10000));
                        stopwatch.reset();
                    }
                }
            }
        });
    }

    public static double getIncremental(final double val, final double inc) {
        final double one = 1.0 / inc;
        return Math.round(val * one) / one;
    }
}
