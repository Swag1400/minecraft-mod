package me.comu.client.module.impl.toggle.exploits;

import me.comu.api.event.Listener;
import me.comu.client.command.Command;
import me.comu.client.core.Gun;
import me.comu.client.events.PacketEvent;
import me.comu.client.events.TickEvent;
import me.comu.client.logging.Logger;
import me.comu.client.module.ModuleType;
import me.comu.client.module.ToggleableModule;
import me.comu.client.notification.Notification;
import me.comu.client.notification.NotificationManager;
import me.comu.client.notification.NotificationType;
import me.comu.client.properties.Property;
import net.minecraft.network.play.server.S38PacketPlayerListItem;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.UUID;
import java.util.concurrent.CopyOnWriteArrayList;

public final class AntiVanish extends ToggleableModule
{

    private final Property<Boolean> log = new Property<>(false, "Log", "logging", "l", "lo", "logger", "logchat", "lg");
    private final CopyOnWriteArrayList<UUID> vanished;

    public AntiVanish()
    {

        super("AntiVanish", new String[] {"antivanish", "novanish", "vanish"}, 0xFF909AD4, ModuleType.EXPLOITS);
        this.vanished = new CopyOnWriteArrayList<>();
        Gun.getInstance().getCommandManager().register(new Command(new String[] {"vanishlist","getvanished","whovanished","vanished","listvanish"})
        {
            @Override
            public String dispatch()
            {
                if (vanished.isEmpty())
                    return "No Vanished Players";
                StringBuilder builder = new StringBuilder("Vanished (" + vanished.size() + "): " );
                for (UUID uuid : vanished)
                {
                    builder.append(getName(uuid)).append(" ");
                }
                return builder.toString();
            }
        });
        this.listeners.add(new Listener<PacketEvent>("anti_vanish_packet_listener")
        {
            @Override
            public void call(PacketEvent event)
            {

                    setTag("AntiVanish \2477" + (minecraft.theWorld.playerEntities.size()-1) + " | " + minecraft.thePlayer.sendQueue.func_175106_d().size());
                if (!(minecraft.isSingleplayer())){
                    final String server = AntiVanish.minecraft.getCurrentServerData().serverIP.toLowerCase();
                    if (server.contains("hypixel") || server.contains("hive") || server.contains("mineplex")) {
                        NotificationManager.notify(new Notification(NotificationType.INFO, "\247n" +getLabel(), getLabel() + "disabled.",3));
                        Logger.getLogger().printToChat(getLabel() + " disabled for optimization.");
                        toggle();
                    }
            	if (minecraft.theWorld != null && event.getPacket() instanceof S38PacketPlayerListItem) {
                    final S38PacketPlayerListItem listItem = (S38PacketPlayerListItem)event.getPacket();
                    if (listItem.func_179768_b() == S38PacketPlayerListItem.Action.UPDATE_LATENCY) {
                        for (final Object o : listItem.func_179767_a()) {
                            S38PacketPlayerListItem.AddPlayerData data = (S38PacketPlayerListItem.AddPlayerData) o;

                            if (minecraft.func_175102_a().func_175102_a(data.field_179964_d.getId()) == null && !checkList(data.field_179964_d.getId())) {
                                final SimpleDateFormat formatDate = new SimpleDateFormat("hh:mm a");
                                   final String timeString = formatDate.format(new Date());
                                String[] name = getName(data.field_179964_d.getId()).split("\\s+");
                                Logger.getLogger().printToChat(name[0] + "\2477 is vanished. (" + timeString + ")"); // TODO: add a date tp eacj vanish logn
                                NotificationManager.notify(new Notification(NotificationType.WARNING, "\247n" + getLabel(), name[0] + " is vanished!", 5));
                            }
                        }
                        }
                    }
                }

            }
        });
        this.listeners.add(new Listener<TickEvent>("update_event") {
            @Override
            public void call(TickEvent event) {
                for (final UUID uuid : vanished) {
                    if (minecraft.func_175102_a().func_175102_a(uuid) != null) {
                        Logger.getLogger().printToChat(getName(uuid) + "is no longer vanished.");
                        vanished.remove(uuid);
                    }
                }
            }
        });
    }

    public String getName(final UUID uuid) {
        try {   // TODO: errors on vpn usage cuz of cloudfare check
            final URL url = new URL("https://namemc.com/profile/" + uuid.toString());
            final URLConnection connection = url.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.7; en-US; rv:1.9.2.2) Gecko/20100316 Firefox/3.6.2");
            final BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String name = null;
            String line;
            while ((line = reader.readLine()) != null) {
                if (line.contains("<title>")) {
                    name = line.split("ยง")[0].trim().replaceAll("<title>", "").replaceAll("</title>", "").replaceAll("\u2013 Minecraft Profile \u2013 NameMC", "").replaceAll("\u00e2\u20ac\u201c Minecraft Profile \u00e2\u20ac\u201c NameMC", "");
                }
            }
            reader.close();
            return name;
        }
        catch (Exception e) {
            e.printStackTrace();
            return "(Failed) " + uuid + " (Likely VPN Usage) ";
        }
    }

    private boolean checkList(final UUID uuid) {
        if (this.vanished.contains(uuid)) {
            this.vanished.remove(uuid);
            return true;
        }
        this.vanished.add(uuid);
        return false;
    }

}
