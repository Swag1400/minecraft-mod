package me.comu.client.module.impl.toggle.exploits;

import me.comu.api.event.Listener;
import me.comu.api.minecraft.helper.PlayerHelper;
import me.comu.api.minecraft.render.RenderMethods;
import me.comu.api.stopwatch.Stopwatch;
import me.comu.client.events.BlockClickedEvent;
import me.comu.client.events.MotionUpdateEvent;
import me.comu.client.events.PacketEvent;
import me.comu.client.events.RenderEvent;
import me.comu.client.module.ModuleType;
import me.comu.client.module.ToggleableModule;
import me.comu.client.properties.NumberProperty;
import me.comu.client.properties.Property;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.RenderGlobal;
import net.minecraft.item.ItemBlock;
import net.minecraft.network.play.client.C07PacketPlayerDigging;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import net.minecraft.network.play.client.C0APacketAnimation;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.MathHelper;

public class CivBreak extends ToggleableModule
{
    private C07PacketPlayerDigging dig;
    private boolean shouldRender;
    private BlockPos pos;
    private static EnumFacing side;
    private final Stopwatch stopwatch = new Stopwatch();
    private final NumberProperty<Double> reach = new NumberProperty<>(5D, 3D, 15D,3D, "Reach", "r");
    private final NumberProperty<Long> delay = new NumberProperty<>(300L, 0L, 1000L, 50L, "Delay", "d");
    private final Property<Boolean> blockPlace = new Property<>(false, "BlockPlace", "block", "b");


    public CivBreak()
    {
        super("CivBreak", new String[] {"civbreak", "cb","civ"}, 0xFFFFB600, ModuleType.EXPLOITS);
        this.offerProperties(reach, delay, blockPlace);
        this.listeners.add(new Listener<PacketEvent>("civbreak_packet_listener")
        {
            @Override
            public void call(PacketEvent event)
            {

                if (((event.getPacket() instanceof C07PacketPlayerDigging)) && ((dig == null) || (event.getPacket() != dig)) && pos != null)
                {
                    C07PacketPlayerDigging packet = (C07PacketPlayerDigging) event.getPacket();

                    if (packet.func_180762_c() == C07PacketPlayerDigging.Action.STOP_DESTROY_BLOCK)
                    {
                        dig = packet;
                        shouldRender = true;
                    }
                }
            }
        });
        this.listeners.add(new Listener<MotionUpdateEvent>("civbreak_event_listener")
        {
            @Override
            public void call(MotionUpdateEvent event)
            {
                if ((dig != null) && (minecraft.thePlayer.getDistance(pos.getX(), pos.getY(), pos.getZ()) < reach.getValue()) && stopwatch.hasCompleted(delay.getValue()) && pos != null)
                {
                    float[] rotations = rotations(pos);

                    switch (event.getTime())
                    {
                        case BEFORE:
                            event.setRotationYaw(PlayerHelper.wrapAngleTo180(rotations[0]));
                            event.setRotationPitch(PlayerHelper.wrapAngleTo180(rotations[1]));
                            break;

                        case AFTER:
                            minecraft.thePlayer.sendQueue.addToSendQueue(new C0APacketAnimation());
                            minecraft.thePlayer.sendQueue.addToSendQueue(dig);

                            if (blockPlace.getValue() && !(minecraft.thePlayer.getHeldItem().getItem() instanceof ItemBlock))
                            {
                                minecraft.thePlayer.sendQueue.addToSendQueue(new C08PacketPlayerBlockPlacement(pos, -1, minecraft.thePlayer.getCurrentEquippedItem(), 0F, 0F, 0F));
                            }

                            //  minecraft.playerController.func_180512_c(new BlockPos(pos), side);
                            stopwatch.reset();
                            break;
                    }
                }
            }
        });
        this.listeners.add(new Listener<BlockClickedEvent>("civbreak_blockclick_listener")
        {
            @Override
            public void call(BlockClickedEvent event)
            {
                pos = event.getBlockPos();
                side = event.getEnumFacing();
                minecraft.thePlayer.sendQueue.addToSendQueue(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.START_DESTROY_BLOCK, pos, side));
                minecraft.thePlayer.sendQueue.addToSendQueue(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.STOP_DESTROY_BLOCK, pos, side));
            }
        });
        this.listeners.add(new Listener<RenderEvent>("civ_break_module_render_world_hook")
        {
            @Override
            public void call(RenderEvent event)
            {
                if (pos == null || side == null)
                {
                    return;
                }

                if (pos != null && shouldRender)
                {
                    RenderMethods.enableGL3D();
                    double x = pos.getX() - minecraft.getRenderManager().viewerPosX;
                    double y = pos.getY() - minecraft.getRenderManager().viewerPosY;
                    double z = pos.getZ() - minecraft.getRenderManager().viewerPosZ;
                    AxisAlignedBB boundingBox = AxisAlignedBB.fromBounds(x, y, z, x + 1.0D, y + 1.0D, z + 1.0D);
                    GlStateManager.color(1.0F, 1.0F, 0.0F, 0.3F);
                    RenderGlobal.drawOutlinedBoundingBox(boundingBox, -1);
                    GlStateManager.color(1.0F, 1.0F, 0.0F, 0.2F);
                    RenderMethods.drawBox(boundingBox);
                    RenderMethods.disableGL3D();
                }
            }
        });
    }

    public float[] rotations(BlockPos pos)
    {
        double x = pos.getX() + 0.5D - minecraft.thePlayer.posX;
        double y = pos.getZ() + 0.5D - minecraft.thePlayer.posZ;
        double z = pos.getY() + 0.5D - (minecraft.thePlayer.posY + minecraft.thePlayer.getEyeHeight());
        double var14 = MathHelper.sqrt_double(x * x + y * y);
        float yaw = (float)(Math.atan2(y, x) * 180.0D / Math.PI) - 90.0F;
        float pitch = (float) - (Math.atan2(z, var14) * 180.0D / Math.PI);
        return new float[] {yaw, pitch};
    }

    @Override
    protected void onDisable()
    {
        super.onDisable();
        pos = null;
        dig = null;
        side = null;
        shouldRender = false;
    }
}
